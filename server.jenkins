def buildDocker

pipeline {
    agent any
    
    options {
    skipDefaultCheckout true
    }
    
    parameters { 
        choice(name: 'BUILD', choices: ['NOT OKE!', 'OKE!'])
        choice(name: 'DEVELOPMENT', choices: ['NOT OKE!', 'OKE'])
        text(name: 'Description', defaultValue: '')
        booleanParam(name: 'RUNBUILD', defaultValue: false, description: 'YES,IM AGREE!')
    }

    stages{
        stage('BUILD') {
            steps {
                nodejs('nodejs12') {
                    sh 'yarn install'
                }
            }
        }
        
        stage('TEST FRONTEND') {
            steps {
               echo "Testing passed!"
            }
        }

        stage("PULL FRONTEND"){
            when {
                expression {
                    script {
                        if (BRANCH_NAME == 'master' || params.BUILD == 'OKE') {
                            server = 'Build testing CI'
                        } else if (params.DEVELOPMENT == 'OKE' ) {
                            server = 'Build testing CICD'
                        }
                    }
                    params.RUNBUILD
                }
            }
            steps {
                echo 'Pull image frontend - process.'
                script {
                    sshPublisher(
                        publishers: [
                            sshPublisherDesc(
                                configName: "${server}",
                                verbose: false,
                                transfers: [
                                    sshTransfer(
                                        execCommand: 'docker pull adityaudi/app-frontend:v1.0.0.1; docker pull adityaudi/sup-frontend:v1.0.0.1;',
                                        execTimeout: 120000,
                                    )
                                ]
                            )
                        ]
                    )
                }
                echo 'Pull image frontend - success.'
            }
        }

        stage('TEST BACKEND') {
            steps {
               echo "Testing passed!"
            }
        }

        stage("PULL BACKEND"){
            when {
                expression {
                    script {
                        if (BRANCH_NAME == 'master' || params.BUILD == 'OKE') {
                            server = 'Build testing CI'
                        } else if (params.DEVELOPMENT == 'OKE') {
                            server = 'Build testing CICD'
                        }
                    }
                    params.RUNBUILD
                }
            }
            steps {
                echo 'Pull image backend - process.'
                script {
                    sshPublisher(
                        publishers: [
                            sshPublisherDesc(
                                configName: "${server}",
                                verbose: false,
                                transfers: [
                                    sshTransfer(
                                        execCommand: 'docker pull adityaudi/app-backend:v1.0.0.2;',
                                        execTimeout: 120000,
                                    )
                                ]
                            )
                        ]
                    )
                }
                echo 'Pull image frontend - success.'
            }
        }

        stage("RUNNING"){
            when {
                expression {
                    script {
                        if (BRANCH_NAME == 'master' || params.BUILD == 'OKE') {
                            server = 'Build testing CI'
                        } else if (params.DEVELOPMENT == 'OKE'  ) {
                            server = 'Build testing CICD'
                        }
                    }
                    params.RUNBUILD
                }
            }
            steps {
                echo 'Docker compose - running.'
                script {
                    sshPublisher(
                        publishers: [
                            sshPublisherDesc(
                                configName: "${server}",
                                verbose: false,
                                transfers: [
                                    sshTransfer(
                                        sourceFiles: 'docker-compose.yml',
                                        remoteDirectory: 'home/ubuntu',
                                        execCommand: 'cd home/ubuntu/coffeeshop-jenkinsCICD || docker-compose up -d; docker ps',
                                        execTimeout: 120000,
                                    )
                                ]
                            )
                        ]
                    )
                }
                echo 'Docker compose - Success.'
            }
        }
    }    
}